plugins {
    id 'org.jetbrains.kotlin.jvm' version "1.5.0"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.5.0"
    id ("org.openjfx.javafxplugin") version "0.0.9"
    id 'org.beryx.runtime' version '1.11.3'
}



repositories {
    mavenCentral()
    jcenter()
}



javafx {
    version = "13"
    modules = ["javafx.controls", "javafx.fxml",  "javafx.graphics", "javafx.web"]
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.0"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.0"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation group: 'com.google.inject', name: 'guice', version: '4.2.3'
    implementation 'org.apache.commons:commons-exec:1.3'

    implementation("org.openjfx:javafx-base")
    implementation("org.openjfx:javafx-graphics")
    implementation("org.openjfx:javafx-fxml")
    implementation("com.jfoenix:jfoenix:9.0.10")
    implementation("org.controlsfx:controlsfx:11.0.3")
    implementation "org.apache.lucene:lucene-core:8.7.0"
    implementation "org.apache.lucene:lucene-queryparser:8.7.0"
    implementation "org.apache.lucene:lucene-analyzers-common:8.7.0"
    implementation platform('org.kordamp.ikonli:ikonli-bom:12.2.0')
    implementation 'org.kordamp.ikonli:ikonli-javafx'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack'

    implementation files('libs/scenicview.jar')

    testImplementation 'io.rest-assured:kotlin-extensions'
}

group 'my-groupId'
version 'my-version'

allOpen {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}
test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

runtime  {
            options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--bind-services']
            imageZip = file("$buildDir/my-notes.zip")
            launcher {
                noConsole = true
            }

            jpackage {
                def currentOs = org.gradle.internal.os.OperatingSystem.current()
                def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
                imageOptions += ['--icon', "src/main/resources/hellofx.$imgType"]
                installerOptions += ['--resource-dir', "src/main/resources"]
                installerOptions += ['--vendor', 'BRC']
                if(currentOs.windows) {
                    installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
                }
                else if (currentOs.linux) {
                    installerOptions += ['--linux-package-name', 'hellofx','--linux-shortcut']
                }
                else if (currentOs.macOsX) {
                    installerOptions += ['--mac-package-name', 'hellofx']
                }
            }
        }

mainClassName = 'com.praveenray.notes.Launcher'
applicationName = 'notes'
